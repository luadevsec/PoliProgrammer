@startuml

package linguagem {

    ' Interface para Conversores de Linguagem
    interface Conversor {
        + converter(String, String): String
    }

    ' Classe Universal para integração de todas as linguagens
    class Universal {
        - suport_map : Dict<String>
        + suported(linguagem : String): boolean
        + converter(paradigma : String, codigo : String): String
        - converterParadigmaFuncional(codigo: String): String
        - converterParadigmaImperativo(codigo: String): String
        - converterParadigmaLogico(codigo: String): String
        - converterParadigmaOrientadoAObjetos(codigo: String): String
    }

    ' Classe abstrata para paradigmas
    abstract class Paradigma {
        - suport_map : Dict<String>
        + suported(linguagem : String): boolean
        + converter(linguagem : String, codigo : String): String
    }

    ' Classes para cada Paradigma
    class ParadigmaImperativo {
        - suport_map : Dict<Linguagem>
        + suported(linguagem : String): boolean
        + converter(linguagem : String, codigo : String): String
        - converterGo(codigo: String): String
        - converterJavascript(codigo: String): String
        - converterLua(codigo: String): String
        - converterTypescript(codigo: String): String
    }

    class ParadigmaFuncional {
        - suport_map : Dict<Linguagem>
        + suported(linguagem : String): boolean
        + converter(linguagem : String, codigo : String): String
    }

    class ParadigmaLogico {
        - suport_map : Dict<Linguagem>
        + suported(linguagem : String): boolean
        + converter(linguagem : String, codigo : String): String
        - converterProlog(codigo: String): String
    }

    class ParadigmaOrientadoAObjetos {
        - suport_map : Dict<Linguagem>
        + suported(linguagem : String): boolean
        + converter(linguagem : String, codigo : String): String
        - converterJava(codigo: String): String
        - converterPython(codigo: String): String
    }

    ' Interface para linguagem
    interface Linguagem {
        - suport_map : Dict<String>
        + suported(paradigma : String): boolean
        + converter(paradigma : String, codigo : String): String
    }

    ' Classes de Linguagens Específicas
    class Python implements Linguagem {
    }

    class Javascript implements Linguagem {
    }

    class Java implements Linguagem {
    }

    class Typescript implements Linguagem {
    }

    class Go implements Linguagem {
    }

    class Lua implements Linguagem {
    }

    class Prolog implements Linguagem {
    }

    ' Ligações entre Linguagens e Paradigmas
    ParadigmaOrientadoAObjetos <|-- Python
    ParadigmaImperativo <|-- Javascript
    ParadigmaOrientadoAObjetos <|-- Java
    ParadigmaImperativo <|-- Typescript
    ParadigmaImperativo <|-- Go
    ParadigmaImperativo <|-- Lua
    ParadigmaLogico <|-- Prolog

    ' Ligações de Paradigmas com o Universal
    Universal <|-- ParadigmaImperativo
    Universal <|-- ParadigmaFuncional
    Universal <|-- ParadigmaLogico
    Universal <|-- ParadigmaOrientadoAObjetos

    ' Ligações de Paradigmas com Paradigma (herança)
    Paradigma <|-- ParadigmaImperativo
    Paradigma <|-- ParadigmaFuncional
    Paradigma <|-- ParadigmaLogico
    Paradigma <|-- ParadigmaOrientadoAObjetos

    ' Ligações de Linguagens e Conversores
    Conversor <|.. Python
    Conversor <|.. Javascript
    Conversor <|.. Java
    Conversor <|.. Typescript
    Conversor <|.. Go
    Conversor <|.. Lua
    Conversor <|.. Prolog

    ' Ligações de LinguagemConversor com Linguagens
    LinguagemConversor --> Python
    LinguagemConversor --> Javascript
    LinguagemConversor --> Java
    LinguagemConversor --> Typescript
    LinguagemConversor --> Go
    LinguagemConversor --> Lua
    LinguagemConversor --> Prolog

    ' Classe para execução dos conversores de linguagens
    class LinguagemConversor {
        - suport_map : Dict<Linguagem>
        + suported(linguagem : String): boolean
        + execute(linguagem_key : String, codigo : String): String
    }
}

package Democracia {
    class Campanha {
        + author: String
        + votos: int
        + origem: String
        + destino: String
        + idAuthor: String
        + idCampanha: String
    }
    
    class Democracia {
        + getRanking(top: int, details: boolean): List<Campanha>
        + postCandidate(origin: String, target: String, id: String, campanha: String): Campanha
        + putVote(campanha: String) : void
        + patchComplete(campanha: String, author: String) : void
    }
    
    Democracia <.. Campanha
}

package request {
    class Router {
        + receba(body : Json): void
    }
    Router --> APIController: faz o pedido para a APIController
    
    class APIController {
        + postCodigo(codigo: String, linguagemOrigem: String, linguagemDestino: String): String
        + getLinguagensSuportadas(): List<String>
        + getSuported(linguagem: String): boolean
        + getRanking(top: int, details: boolean): List<String>
        + postCandidate(linguagemOrigem: String, linguagemDestino: String, id: String, campanha: String): String
        + putVote(campanha: String) : String
        + patchComplete(campanha: String, author: String) : String
    }
    
    APIController --> Democracia.Democracia: gerenciamento de votos
    APIController --> LinguagemConversor: conversão de código
}
    Router --> login.AuthManager: solicitação de autenticação

package login {
    class AuthManager {
        + autenticar(email: String, key: UUID): String
        + checarId(tempid: String) : String
    }
}

@enduml